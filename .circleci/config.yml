version: 2.1
orbs:
  aws: circleci/aws-cli@3.1.5
  python: circleci/python@2.1.1
  slack: circleci/slack@4.12.1

executors:
  node:
    docker:
      - image: cimg/node:18.0.0

commands:
  setup-kubectl:
    description: Install kubectl
    steps:
      - run:
          name: Install kubectl
          command: |
            sudo apt update
            curl -O https://s3.us-west-2.amazonaws.com/amazon-eks/1.23.17/2023-05-11/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            mkdir -p $HOME/bin && cp ./kubectl $HOME/bin/kubectl && export PATH=$HOME/bin:$PATH
            kubectl version --short --client

  setup-eksctl:
    steps:
      - run:
          name: install eksctl
          command: |
            ARCH=amd64
            PLATFORM=$(uname -s)_$ARCH

            curl -sLO "https://github.com/weaveworks/eksctl/releases/latest/download/eksctl_$PLATFORM.tar.gz"
            tar -xzf eksctl_$PLATFORM.tar.gz -C /tmp && rm eksctl_$PLATFORM.tar.gz
            sudo mv /tmp/eksctl /usr/local/bin
            eksctl version

  destroy-stack:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      stack_name:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name "<<parameters.stack_name>>"

  revert-deploy:
    description: Revert deploy
    steps:
      - run:
          name: revert
          command: |
            kubectl rollout undo deployment uda-capstone
            kubectl describe deployment uda-capstone
            kubectl get all
          when: on_fail

  delete_s3:
    description: Delete all S3
    parameters:
      id:
        type: string
    steps:
      - run:
          name: delete all aws s3 files
          command: aws s3 rm s3://udapeople-<< parameters.id >> --recursive
          when: on_fail

  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  install_dependencies:
    description: install dependencies and setup aws cli
    steps:
      - run:
          name: install dependencies
          command: |
            sudo apt upgrade
            sudo apt update
            sudo apt install awscli -y
      - run:
          name: config awscli
          command: |
            aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
            aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
            aws configure set region $AWS_DEFAULT_REGION

  setup_aws:
    description: setup aws
    steps:
      - aws/setup:
          aws-access-key-id: AWS_ACCESS_KEY_ID
          aws-secret-access-key: AWS_SECRET_ACCESS_KEY
          aws-region: AWS_DEFAULT_REGION

jobs:
  build-app:
    docker:
      - image: cimg/node:18.0.0
    steps:
      - checkout
      - restore_cache:
          key: fe-build--{{ .Revision  }}
      - run:
          name: Build front-end
          command: |
            cd app
            yarn install
            yarn build
      - save_cache:
          paths: [frontend/node_modules]
          key: fe-build--{{ .Revision  }}

  test-app:
    docker:
      - image: cimg/node:18.0.0
    steps:
      - checkout
      - restore_cache:
          key: fe-build--{{ .Revision  }}
      - run:
          name: Test App
          command: |
            cd app
            yarn install
            yarn test

  scan-app:
    docker:
      - image: cimg/node:18.0.0
    steps:
      - checkout
      - restore_cache:
          key: fe-build--{{ .Revision  }}
      - run:
          name: Scan app
          command: |
            cd app
            yarn install
            yarn audit --audit-level=critical

  lint-app:
    docker:
      - image: cimg/node:18.0.0
    steps:
      - checkout
      - restore_cache:
          key: fe-build--{{ .Revision  }}
      - run:
          name: Lint app
          command: |
            cd app
            yarn install
            yarn lint

  build-fe-docker-img:
    docker:
      - image: cimg/base:2022.06
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: login docker
          command: docker login --username $DOCKER_USERNAME --password $DOCKER_PASSWORD
      - run:
          name: build docker img
          command: |
            scripts/build-docker.sh latest 
            scripts/build-docker.sh ${CIRCLE_SHA1:0:7}
      - run:
          name: push docker img
          command: |
            chmod +x scripts/upload-docker.sh
            scripts/upload-docker.sh latest 
            scripts/upload-docker.sh ${CIRCLE_SHA1:0:7}

  deploy-app:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_dependencies
      - setup_aws
      - setup-kubectl
      - setup-eksctl
      - run:
          name: Create an EKS Cluster
          command: |
            aws eks update-kubeconfig --region us-east-1 --name uda-capstone-cluster
            kubectl config get-contexts
            kubectl get all
            kubectl describe deployment uda-app-deployment
      - run:
          name: deploy app
          command: |
            kubectl set image deployment/uda-capstone uda-app=phucla132/fe-app:${CIRCLE_SHA1:0:7}
            kubectl rollout status deployment uda-capstone
            kubectl describe deployment uda-capstone
            kubectl get all
      - run:
          name: smoke test
          command: |
            chmod +x scripts/smoke-test.sh
            scripts/smoke-test.sh
      - revert-deploy
workflows:
  default:
    jobs:
      - lint-app
      - build-app:
          requires: [lint-app]
      - test-app:
          requires: [build-app]
      - scan-app:
          requires: [build-app]

      - build-fe-docker-img:
          requires: [test-app, build-app, scan-app, lint-app]
      - deploy-app:
          requires: [build-fe-docker-img]
